{"version":3,"sources":["../src/gemini.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CandidateData,\n  defineModel,\n  GenerationCommonConfigSchema,\n  getBasicUsageStats,\n  MediaPart,\n  MessageData,\n  ModelAction,\n  ModelMiddleware,\n  modelRef,\n  ModelReference,\n  Part,\n  ToolDefinitionSchema,\n  ToolRequestPart,\n  ToolResponsePart,\n} from '@genkit-ai/ai/model';\nimport {\n  downloadRequestMedia,\n  simulateSystemPrompt,\n} from '@genkit-ai/ai/model/middleware';\nimport { GENKIT_CLIENT_HEADER } from '@genkit-ai/core';\nimport {\n  FunctionCallPart,\n  FunctionDeclaration,\n  FunctionDeclarationSchemaType,\n  FunctionResponsePart,\n  GenerateContentCandidate as GeminiCandidate,\n  Content as GeminiMessage,\n  Part as GeminiPart,\n  GenerateContentResponse,\n  GoogleGenerativeAI,\n  InlineDataPart,\n  RequestOptions,\n  StartChatParams,\n} from '@google/generative-ai';\nimport process from 'process';\nimport z from 'zod';\n\nconst SafetySettingsSchema = z.object({\n  category: z.enum([\n    'HARM_CATEGORY_UNSPECIFIED',\n    'HARM_CATEGORY_HATE_SPEECH',\n    'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n    'HARM_CATEGORY_HARASSMENT',\n    'HARM_CATEGORY_DANGEROUS_CONTENT',\n  ]),\n  threshold: z.enum([\n    'BLOCK_LOW_AND_ABOVE',\n    'BLOCK_MEDIUM_AND_ABOVE',\n    'BLOCK_ONLY_HIGH',\n    'BLOCK_NONE',\n  ]),\n});\n\nconst GeminiConfigSchema = GenerationCommonConfigSchema.extend({\n  safetySettings: z.array(SafetySettingsSchema).optional(),\n});\n\nexport const geminiPro = modelRef({\n  name: 'googleai/gemini-pro',\n  info: {\n    label: 'Google AI - Gemini Pro',\n    versions: ['gemini-1.0-pro', 'gemini-1.0-pro-latest', 'gemini-1.0-pro-001'],\n    supports: {\n      multiturn: true,\n      media: false,\n      tools: true,\n      systemRole: true,\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const geminiProVision = modelRef({\n  name: 'googleai/gemini-pro-vision',\n  info: {\n    label: 'Google AI - Gemini Pro Vision',\n    // none declared on https://ai.google.dev/models/gemini#model-variations\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: false,\n      systemRole: false,\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini15Pro = modelRef({\n  name: 'googleai/gemini-1.5-pro-latest',\n  info: {\n    label: 'Google AI - Gemini 1.5 Pro',\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      systemRole: true,\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini15Flash = modelRef({\n  name: 'googleai/gemini-1.5-flash-latest',\n  info: {\n    label: 'Google AI - Gemini 1.5 Flash',\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      systemRole: true,\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const geminiUltra = modelRef({\n  name: 'googleai/gemini-ultra',\n  info: {\n    label: 'Google AI - Gemini Ultra',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: false,\n      tools: true,\n      systemRole: true,\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const SUPPORTED_V1_MODELS: Record<\n  string,\n  ModelReference<z.ZodTypeAny>\n> = {\n  'gemini-pro': geminiPro,\n  'gemini-pro-vision': geminiProVision,\n  // 'gemini-ultra': geminiUltra,\n};\n\nexport const SUPPORTED_V15_MODELS: Record<\n  string,\n  ModelReference<z.ZodTypeAny>\n> = {\n  'gemini-1.5-pro-latest': gemini15Pro,\n  'gemini-1.5-flash-latest': gemini15Flash,\n};\n\nconst SUPPORTED_MODELS = {\n  ...SUPPORTED_V1_MODELS,\n  ...SUPPORTED_V15_MODELS,\n};\n\nfunction toGeminiRole(\n  role: MessageData['role'],\n  model?: ModelReference<z.ZodTypeAny>\n): string {\n  switch (role) {\n    case 'user':\n      return 'user';\n    case 'model':\n      return 'model';\n    case 'system':\n      if (model && SUPPORTED_V15_MODELS[model.name]) {\n        // We should have already pulled out the supported system messages,\n        // anything remaining is unsupported; throw an error.\n        throw new Error(\n          'system role is only supported for a single message in the first position'\n        );\n      } else {\n        throw new Error('system role is not supported');\n      }\n    case 'tool':\n      return 'function';\n    default:\n      return 'user';\n  }\n}\n\nfunction convertSchemaProperty(property) {\n  if (!property) {\n    return null;\n  }\n  if (property.type === 'object') {\n    const nestedProperties = {};\n    Object.keys(property.properties).forEach((key) => {\n      nestedProperties[key] = convertSchemaProperty(property.properties[key]);\n    });\n    return {\n      type: FunctionDeclarationSchemaType.OBJECT,\n      properties: nestedProperties,\n      required: property.required,\n    };\n  } else if (property.type === 'array') {\n    return {\n      type: FunctionDeclarationSchemaType.ARRAY,\n      items: convertSchemaProperty(property.items),\n    };\n  } else {\n    return {\n      type: FunctionDeclarationSchemaType[property.type.toUpperCase()],\n    };\n  }\n}\n\nfunction toGeminiTool(\n  tool: z.infer<typeof ToolDefinitionSchema>\n): FunctionDeclaration {\n  const declaration: FunctionDeclaration = {\n    name: tool.name.replace(/\\//g, '__'), // Gemini throws on '/' in tool name\n    description: tool.description,\n    parameters: convertSchemaProperty(tool.inputSchema),\n  };\n  return declaration;\n}\n\nfunction toInlineData(part: MediaPart): InlineDataPart {\n  const dataUrl = part.media.url;\n  const b64Data = dataUrl.substring(dataUrl.indexOf(',')! + 1);\n  const contentType =\n    part.media.contentType ||\n    dataUrl.substring(dataUrl.indexOf(':')! + 1, dataUrl.indexOf(';'));\n  return { inlineData: { mimeType: contentType, data: b64Data } };\n}\n\nfunction fromInlineData(inlinePart: InlineDataPart): MediaPart {\n  // Check if the required properties exist\n  if (\n    !inlinePart.inlineData ||\n    !inlinePart.inlineData.hasOwnProperty('mimeType') ||\n    !inlinePart.inlineData.hasOwnProperty('data')\n  ) {\n    throw new Error('Invalid InlineDataPart: missing required properties');\n  }\n  const { mimeType, data } = inlinePart.inlineData;\n  // Combine data and mimeType into a data URL\n  const dataUrl = `data:${mimeType};base64,${data}`;\n  return {\n    media: {\n      url: dataUrl,\n      contentType: mimeType,\n    },\n  };\n}\n\nfunction toFunctionCall(part: ToolRequestPart): FunctionCallPart {\n  if (!part?.toolRequest?.input) {\n    throw Error('Invalid ToolRequestPart: input was missing.');\n  }\n  return {\n    functionCall: {\n      name: part.toolRequest.name,\n      args: part.toolRequest.input,\n    },\n  };\n}\n\nfunction fromFunctionCall(part: FunctionCallPart): ToolRequestPart {\n  if (!part.functionCall) {\n    throw Error('Invalid FunctionCallPart');\n  }\n  return {\n    toolRequest: {\n      name: part.functionCall.name,\n      input: part.functionCall.args,\n    },\n  };\n}\n\nfunction toFunctionResponse(part: ToolResponsePart): FunctionResponsePart {\n  if (!part?.toolResponse?.output) {\n    throw Error('Invalid ToolResponsePart: output was missing.');\n  }\n  return {\n    functionResponse: {\n      name: part.toolResponse.name,\n      response: {\n        name: part.toolResponse.name,\n        content: part.toolResponse.output,\n      },\n    },\n  };\n}\n\nfunction fromFunctionResponse(part: FunctionResponsePart): ToolResponsePart {\n  if (!part.functionResponse) {\n    throw new Error('Invalid FunctionResponsePart.');\n  }\n  return {\n    toolResponse: {\n      name: part.functionResponse.name.replace(/__/g, '/'), // restore slashes\n      output: part.functionResponse.response,\n    },\n  };\n}\n\nfunction toGeminiPart(part: Part): GeminiPart {\n  if (part.text !== undefined) return { text: part.text };\n  if (part.media) return toInlineData(part);\n  if (part.toolRequest) return toFunctionCall(part);\n  if (part.toolResponse) return toFunctionResponse(part);\n  throw new Error('Unsupported Part type');\n}\n\nfunction fromGeminiPart(part: GeminiPart): Part {\n  if (part.text !== undefined) return { text: part.text };\n  if (part.inlineData) return fromInlineData(part);\n  if (part.functionCall) return fromFunctionCall(part);\n  if (part.functionResponse) return fromFunctionResponse(part);\n  throw new Error('Unsupported GeminiPart type');\n}\n\nexport function toGeminiMessage(\n  message: MessageData,\n  model?: ModelReference<z.ZodTypeAny>\n): GeminiMessage {\n  return {\n    role: toGeminiRole(message.role, model),\n    parts: message.content.map(toGeminiPart),\n  };\n}\n\nexport function toGeminiSystemInstruction(message: MessageData): GeminiMessage {\n  return {\n    role: 'user',\n    parts: message.content.map(toGeminiPart),\n  };\n}\n\nfunction fromGeminiFinishReason(\n  reason: GeminiCandidate['finishReason']\n): CandidateData['finishReason'] {\n  if (!reason) return 'unknown';\n  switch (reason) {\n    case 'STOP':\n      return 'stop';\n    case 'MAX_TOKENS':\n      return 'length';\n    case 'SAFETY': // blocked for safety\n    case 'RECITATION': // blocked for reciting training data\n      return 'blocked';\n    default:\n      return 'unknown';\n  }\n}\n\nexport function fromGeminiCandidate(candidate: GeminiCandidate): CandidateData {\n  return {\n    index: candidate.index || 0, // reasonable default?\n    message: {\n      role: 'model',\n      content: (candidate.content?.parts || []).map(fromGeminiPart),\n    },\n    finishReason: fromGeminiFinishReason(candidate.finishReason),\n    finishMessage: candidate.finishMessage,\n    custom: {\n      safetyRatings: candidate.safetyRatings,\n      citationMetadata: candidate.citationMetadata,\n    },\n  };\n}\n\n/**\n *\n */\nexport function googleAIModel(\n  name: string,\n  apiKey?: string,\n  apiVersion?: string,\n  baseUrl?: string\n): ModelAction {\n  const modelName = `googleai/${name}`;\n\n  if (!apiKey) {\n    apiKey = process.env.GOOGLE_GENAI_API_KEY || process.env.GOOGLE_API_KEY;\n  }\n  if (!apiKey) {\n    throw new Error(\n      'Please pass in the API key or set the GOOGLE_GENAI_API_KEY or GOOGLE_API_KEY environment variable.\\n' +\n        'For more details see https://firebase.google.com/docs/genkit/plugins/google-genai'\n    );\n  }\n\n  const model: ModelReference<z.ZodTypeAny> = SUPPORTED_MODELS[name];\n  if (!model) throw new Error(`Unsupported model: ${name}`);\n\n  const middleware: ModelMiddleware[] = [];\n  if (SUPPORTED_V1_MODELS[name]) {\n    middleware.push(simulateSystemPrompt());\n  }\n  if (model?.info?.supports?.media) {\n    // the gemini api doesn't support downloading media from http(s)\n    middleware.push(downloadRequestMedia({ maxBytes: 1024 * 1024 * 10 }));\n  }\n\n  return defineModel(\n    {\n      name: modelName,\n      ...model.info,\n      configSchema: model.configSchema,\n      use: middleware,\n    },\n    async (request, streamingCallback) => {\n      const options: RequestOptions = { apiClient: GENKIT_CLIENT_HEADER };\n      if (apiVersion) {\n        options.apiVersion = apiVersion;\n      }\n      if (apiVersion) {\n        options.baseUrl = baseUrl;\n      }\n      const client = new GoogleGenerativeAI(apiKey!).getGenerativeModel(\n        {\n          model: request.config?.version || model.version || name,\n        },\n        options\n      );\n\n      // make a copy so that modifying the request will not produce side-effects\n      const messages = [...request.messages];\n      if (messages.length === 0) throw new Error('No messages provided.');\n\n      // Gemini does not support messages with role system and instead expects\n      // systemInstructions to be provided as a separate input. The first\n      // message detected with role=system will be used for systemInstructions.\n      // Any additional system messages may be considered to be \"exceptional\".\n      let systemInstruction: GeminiMessage | undefined = undefined;\n      if (SUPPORTED_V15_MODELS[name]) {\n        const systemMessage = messages.find((m) => m.role === 'system');\n        if (systemMessage) {\n          messages.splice(messages.indexOf(systemMessage), 1);\n          systemInstruction = toGeminiSystemInstruction(systemMessage);\n        }\n      }\n\n      const chatRequest = {\n        systemInstruction,\n        tools: request.tools?.length\n          ? [{ functionDeclarations: request.tools?.map(toGeminiTool) }]\n          : [],\n        history: messages\n          .slice(0, -1)\n          .map((message) => toGeminiMessage(message, model)),\n        generationConfig: {\n          candidateCount: request.candidates || undefined,\n          temperature: request.config?.temperature,\n          maxOutputTokens: request.config?.maxOutputTokens,\n          topK: request.config?.topK,\n          topP: request.config?.topP,\n          stopSequences: request.config?.stopSequences,\n        },\n        safetySettings: request.config?.safetySettings,\n      } as StartChatParams;\n      const msg = toGeminiMessage(messages[messages.length - 1], model);\n      if (streamingCallback) {\n        const result = await client\n          .startChat(chatRequest)\n          .sendMessageStream(msg.parts);\n        for await (const item of result.stream) {\n          (item as GenerateContentResponse).candidates?.forEach((candidate) => {\n            const c = fromGeminiCandidate(candidate);\n            streamingCallback({\n              index: c.index,\n              content: c.message.content,\n            });\n          });\n        }\n        const response = await result.response;\n        if (!response.candidates?.length) {\n          throw new Error('No valid candidates returned.');\n        }\n        return {\n          candidates: response.candidates?.map(fromGeminiCandidate) || [],\n          custom: response,\n        };\n      } else {\n        const result = await client\n          .startChat(chatRequest)\n          .sendMessage(msg.parts);\n        if (!result.response.candidates?.length)\n          throw new Error('No valid candidates returned.');\n        const responseCandidates =\n          result.response.candidates?.map(fromGeminiCandidate) || [];\n        return {\n          candidates: responseCandidates,\n          custom: result.response,\n          usage: getBasicUsageStats(request.messages, responseCandidates),\n        };\n      }\n    }\n  );\n}\n"],"mappings":"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","names":["_a","_b"]}